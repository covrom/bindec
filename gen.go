package bindec

import (
	"fmt"
	"go/format"
	"go/types"
	"strings"
)

// Options to configure generation.
type Options struct {
	// Path of the package in which the type is located.
	Path string
	// Type to generate encoder and decoder for.
	Type string
	// Recv is the receiver name for the generated methods.
	Recv string
}

// Generate a file of source code containing an encoder and a decoder to
// encode and decode a given type to and from a binary representation of
// itself.
func Generate(opts Options) ([]byte, error) {
	pkg, err := getPackage(opts.Path)
	if err != nil {
		return nil, err
	}

	typ, err := findType(pkg, opts.Type)
	if err != nil {
		return nil, err
	}

	ctx := newParseContext()
	ctx.addImport("encoding/binary")
	ctx.addImport("bytes")
	ctx.addImport("io")
	ctx.addImport("math")

	t, err := parseType(ctx, typ)
	if err != nil {
		return nil, err
	}

	src := []byte(generateFile(pkg.Name(), opts.Recv, opts.Type, t, ctx.getImports()))
	formatted, err := format.Source(src)
	if err != nil {
		return nil, fmt.Errorf("error formatting code: %s\n\n%s", err, string(src))
	}

	return formatted, nil
}

func generateFile(
	pkgName, recv, typeName string,
	typ Type,
	imports []string,
) string {
	encoder := typ.Encoder(recv)
	decoder := typ.Decoder(recv)
	var deps = make([]string, len(imports))
	for i, x := range imports {
		deps[i] = fmt.Sprintf("%q", x)
	}

	return fmt.Sprintf(
		fileTpl,
		pkgName,
		recv,
		typeName,
		encoder,
		decoder,
		strings.Join(deps, "\n"),
	)
}

const fileTpl = `
// WARNING! This is code generated by bindec, do not modify manually.

package %[1]s

import (
	%[6]s
)

var _ = binary.LittleEndian
var _ = math.Abs

// EncodeBinary returns a binary-encoded representation of the type.
func (%[2]s %[3]s) EncodeBinary() ([]byte, error) {
	var writer = bytes.NewBuffer(nil)
	if err := %[2]s.WriteBinary(writer); err != nil {
		return nil, err
	}
	return writer.Bytes(), nil
}

// WriteBinary writes the binary-encoded representation of the type to the
// given writer.
func (%[2]s %[3]s) WriteBinary(writer io.Writer) error {
	%[4]s
	return nil
}

// DecodeBinaryFromBytes fills the type with the given binary-encoded
// representation of the type.
func (%[2]s *%[3]s) DecodeBinaryFromBytes(data []byte) error {
	var reader = bytes.NewReader(data)
	return %[2]s.DecodeBinary(reader)
}

// DecodeBinary reads the binary representation of the type from the given
// reader and fulls the type with it.
func (%[2]s *%[3]s) DecodeBinary(reader io.Reader) error {
	%[5]s
	return nil
}
`

func writeBasic(recv string, kind BasicKind) string {
	switch kind {
	case types.String:
		return fmt.Sprintf(writeString, recv)
	case types.Bool:
		return fmt.Sprintf(writeBool, recv)
	case types.Int:
		return fmt.Sprintf(writeInt, recv)
	case types.Int8:
		return fmt.Sprintf(writeInt8, recv)
	case types.Int16:
		return fmt.Sprintf(writeInt16, recv)
	case types.Int32:
		return fmt.Sprintf(writeInt32, recv)
	case types.Int64:
		return fmt.Sprintf(writeInt64, recv)
	case types.Uint:
		return fmt.Sprintf(writeUint, recv)
	case types.Uint8:
		return fmt.Sprintf(writeByte, recv)
	case types.Uint16:
		return fmt.Sprintf(writeUint16, recv)
	case types.Uint32:
		return fmt.Sprintf(writeUint32, recv)
	case types.Uint64:
		return fmt.Sprintf(writeUint64, recv)
	case types.Uintptr:
		return fmt.Sprintf(writeUintptr, recv)
	case types.Float32:
		return fmt.Sprintf(writeFloat32, recv)
	case types.Float64:
		return fmt.Sprintf(writeFloat64, recv)
	default:
		return ""
	}
}

func readBasic(recv string, kind BasicKind) string {
	switch kind {
	case types.String:
		return fmt.Sprintf(readString, recv)
	case types.Bool:
		return fmt.Sprintf(readBool, recv)
	case types.Int:
		return fmt.Sprintf(readInt, recv)
	case types.Int8:
		return fmt.Sprintf(readInt8, recv)
	case types.Int16:
		return fmt.Sprintf(readInt16, recv)
	case types.Int32:
		return fmt.Sprintf(readInt32, recv)
	case types.Int64:
		return fmt.Sprintf(readInt64, recv)
	case types.Uint:
		return fmt.Sprintf(readUint, recv)
	case types.Uint8:
		return fmt.Sprintf(readByte, recv)
	case types.Uint16:
		return fmt.Sprintf(readUint16, recv)
	case types.Uint32:
		return fmt.Sprintf(readUint32, recv)
	case types.Uint64:
		return fmt.Sprintf(readUint64, recv)
	case types.Uintptr:
		return fmt.Sprintf(readUintptr, recv)
	case types.Float32:
		return fmt.Sprintf(readFloat32, recv)
	case types.Float64:
		return fmt.Sprintf(readFloat64, recv)
	default:
		return ""
	}
}

const (
	readString = `
{
	var sz = make([]byte, 8)
	if _, err := io.ReadFull(reader, sz); err != nil {
		return err
	}

	ux := binary.LittleEndian.Uint64(sz)
	x := int64(ux >> 1)
	if ux&1 != 0 {
		x = ^x
	}

	b := make([]byte, int(x))
	if _, err := io.ReadFull(reader, b); err != nil {
		return err
	}

	%s = string(b)
}
`

	writeString = `
{
	v := %s
	len := len(v)
	ux := uint64(len) << 1
	if len < 0 {
		ux = ^ux
	}
	sz := make([]byte, 8)
	binary.LittleEndian.PutUint64(sz, ux)
	if _, err := writer.Write(sz); err != nil {
		return err
	}

	_, err := writer.Write([]byte(v))
	if err != nil {
		return err
	}
}
`

	readBool = `
{
	var v = make([]byte, 1)
	if _, err := io.ReadFull(reader, v); err != nil {
		return err
	}

	%s = v[0] == 1
}
`

	writeBool = `
{
	var v byte
	if %s {
		v = 1
	}
	_, err := writer.Write([]byte{v})
	if err != nil {
		return err
	}
}
`

	readInt = `
{
	var bs = make([]byte, 8)
	if _, err := io.ReadFull(reader, bs); err != nil {
		return err
	}

	ux := binary.LittleEndian.Uint64(bs)
	x := int64(ux >> 1)
	if ux&1 != 0 {
		x = ^x
	}
	%s = int(x)
}
`

	writeInt = writeInt64

	readUint = `
{
	var bs = make([]byte, 8)
	if _, err := io.ReadFull(reader, bs); err != nil {
		return err
	}

	ux := binary.LittleEndian.Uint64(bs)
	%s = uint(ux)
}
`

	writeUint = `
	{
		x := %s
		bs := make([]byte, 8)
		binary.LittleEndian.PutUint64(bs, uint64(x))
		_, err := writer.Write(bs)
		if err != nil {
			return err
		}
	}
`

	readInt64 = `
{
	var bs = make([]byte, 8)
	if _, err := io.ReadFull(reader, bs); err != nil {
		return err
	}

	ux := binary.LittleEndian.Uint64(bs)
	x := int64(ux >> 1)
	if ux&1 != 0 {
		x = ^x
	}
	%s = x
}
`

	writeInt64 = `
{
	x := %s
	ux := uint64(x) << 1
	if x < 0 {
		ux = ^ux
	}
	bs := make([]byte, 8)
	binary.LittleEndian.PutUint64(bs, ux)
	_, err := writer.Write(bs)
	if err != nil {
		return err
	}
}
`

	readUintptr = `
{
	var bs = make([]byte, 8)
	if _, err := io.ReadFull(reader, bs); err != nil {
		return err
	}

	ux := binary.LittleEndian.Uint64(bs)
	%s = uintptr(ux)
}
`

	writeUintptr = `
{
	x := uint64(%s)
	bs := make([]byte, 8)
	binary.LittleEndian.PutUint64(bs, x)
	_, err := writer.Write(bs)
	if err != nil {
		return err
	}
}
`

	readUint64 = `
{
	var bs = make([]byte, 8)
	if _, err := io.ReadFull(reader, bs); err != nil {
		return err
	}

	ux := binary.LittleEndian.Uint64(bs)
	%s = ux
}
`

	writeUint64 = `
{
	x := %s
	bs := make([]byte, 8)
	binary.LittleEndian.PutUint64(bs, x)
	_, err := writer.Write(bs)
	if err != nil {
		return err
	}
}
`

	readInt32 = `
{
	var bs = make([]byte, 4)
	if _, err := io.ReadFull(reader, bs); err != nil {
		return err
	}

	ux := binary.LittleEndian.Uint32(bs)
	x := int32(ux >> 1)
	if ux&1 != 0 {
		x = ^x
	}
	%s = x
}
`

	writeInt32 = `
{
	x := %s
	ux := uint32(x) << 1
	if x < 0 {
		ux = ^ux
	}
	bs := make([]byte, 4)
	binary.LittleEndian.PutUint32(bs, ux)
	_, err := writer.Write(bs)
	if err != nil {
		return err
	}
}
`

	readUint32 = `
{
	var bs = make([]byte, 4)
	if _, err := io.ReadFull(reader, bs); err != nil {
		return err
	}

	ux := binary.LittleEndian.Uint32(bs)
	%s = ux
}
`

	writeUint32 = `
{
	x := %s
	bs := make([]byte, 4)
	binary.LittleEndian.PutUint32(bs, x)
	_, err := writer.Write(bs)
	if err != nil {
		return err
	}
}
`

	readInt16 = `
{
	var bs = make([]byte, 2)
	if _, err := io.ReadFull(reader, bs); err != nil {
		return err
	}

	ux := binary.LittleEndian.Uint16(bs)
	x := int16(ux >> 1)
	if ux&1 != 0 {
		x = ^x
	}
	%s = x
}
`

	writeInt16 = `
{
	x := %s
	ux := uint16(x) << 1
	if x < 0 {
		ux = ^ux
	}
	bs := make([]byte, 2)
	binary.LittleEndian.PutUint16(bs, ux)
	_, err := writer.Write(bs)
	if err != nil {
		return err
	}
}
`

	readUint16 = `
{
	var bs = make([]byte, 2)
	if _, err := io.ReadFull(reader, bs); err != nil {
		return err
	}

	ux := binary.LittleEndian.Uint16(bs)
	%s = ux
}
`

	writeUint16 = `
{
	x := %s
	bs := make([]byte, 2)
	binary.LittleEndian.PutUint16(bs, x)
	_, err := writer.Write(bs)
	if err != nil {
		return err
	}
}
`

	readInt8 = `
{
	var bs = make([]byte, 1)
	if _, err := io.ReadFull(reader, bs); err != nil {
		return err
	}

	ux := bs[0]
	x := int8(ux >> 1)
	if ux&1 != 0 {
		x = ^x
	}
	%s = x
}
`

	writeInt8 = `
{
	x := %s
	ux := byte(x) << 1
	if x < 0 {
		ux = ^ux
	}
	_, err := writer.Write([]byte{ux})
	if err != nil {
		return err
	}
}
`

	readByte = `
{
	var bs = make([]byte, 1)
	if _, err := io.ReadFull(reader, bs); err != nil {
		return err
	}
	%s = bs[0]
}
`

	writeByte = `
{
	if _, err := writer.Write([]byte{%s}); err != nil {
		return err
	}
}
`

	readFloat32 = `
{
	var bs = make([]byte, 4)
	if _, err := io.ReadFull(reader, bs); err != nil {
		return err
	}
	ux := binary.LittleEndian.Uint32(bs)
	%s = math.Float32frombits(ux)
}
`

	writeFloat32 = `
{
	bs := make([]byte, 4)
	binary.LittleEndian.PutUint32(bs, math.Float32bits(%s))
	_, err := writer.Write(bs)
	if err != nil {
		return err
	}
}
`

	readFloat64 = `
{
	var bs = make([]byte, 8)
	if _, err := io.ReadFull(reader, bs); err != nil {
		return err
	}
	ux := binary.LittleEndian.Uint64(bs)
	%s = math.Float64frombits(ux)
}
`

	writeFloat64 = `
{
	bs := make([]byte, 8)
	binary.LittleEndian.PutUint64(bs, math.Float64bits(%s))
	_, err := writer.Write(bs)
	if err != nil {
		return err
	}
}
`

	readBytes = `
{
	var sz = make([]byte, 8)
	if _, err := io.ReadFull(reader, sz); err != nil {
		return err
	}

	ux := binary.LittleEndian.Uint64(sz)
	x := int64(ux >> 1)
	if ux&1 != 0 {
		x = ^x
	}

	b := make([]byte, int(x))
	if _, err := io.ReadFull(reader, b); err != nil {
		return err
	}

	%s = b
}
`

	writeBytes = `
{
	v := %s
	len := len(v)
	ux := uint64(len) << 1
	if len < 0 {
		ux = ^ux
	}
	sz := make([]byte, 8)
	binary.LittleEndian.PutUint64(sz, ux)
	if _, err := writer.Write(sz); err != nil {
		return err
	}

	_, err := writer.Write(v)
	if err != nil {
		return err
	}
}
`
)
